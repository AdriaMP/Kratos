import KratosMultiphysics
import numpy as np
import sympy as sp
from KratosMultiphysics.SwimmingDEMApplication import field_utilities

## Import base class file
from custom_body_force.manufactured_solution import ManufacturedSolution

def CreateManufacturedSolution(custom_settings):
    return CasasFluidFractionSolution(custom_settings)

class CasasFluidFractionSolution(ManufacturedSolution):
    def __init__(self, settings):

        default_settings = KratosMultiphysics.Parameters("""
            {
                "velocity"    : 1.0,
                "length"      : 1.0,
                "viscosity"   : 0.1,
                "density"     : 1.0,
                "frequency"   : 1.0,
                "damping"     : 1.0,
                "alpha0"      : 0.7,
                "alpha_min"   : 0.4,
                "period"      : 0.1,
                "center_x1"   : 0.0,
                "center_x2"   : 0.0
            }
            """
            )

        settings.ValidateAndAssignDefaults(default_settings)

        self.U = settings["velocity"].GetDouble()
        self.L = settings["length"].GetDouble()
        self.rho = settings["density"].GetDouble()
        self.nu = settings["viscosity"].GetDouble() / self.rho
        self.alpha0 = settings["alpha0"].GetDouble()
        period = settings["period"].GetDouble()
        alpha_min = settings["alpha_min"].GetDouble()
        self.delta_alpha = min(self.alpha0 - alpha_min, 1.0 - self.alpha0)
        self.omega = 2 * np.pi / period
        #self.delta_alpha = 0.6
        #self.omega = 0.0
        self.centerx1 = settings["center_x1"].GetDouble()
        self.centerx2 = settings["center_x2"].GetDouble()

    def alpha(self, time, x1, x2, x3):
        return self.alpha0 + self.delta_alpha*np.sin(self.omega*time + np.arcsin((x2 - self.centerx2) / np.sqrt((x1 - self.centerx1)**2 + (x2 - self.centerx2) **2)))

    def alpha1(self, time, x1, x2, x3):
        return self.delta_alpha*(self.centerx1 - x1)*(-self.centerx2 + x2)*np.cos(self.omega*time + np.arcsin((-self.centerx2 + x2)/np.sqrt((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2)))/(np.sqrt(-(-self.centerx2 + x2)**2/((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2) + 1)*((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2)**(3/2))

    def alpha2(self, time, x1, x2, x3):
        return self.delta_alpha*((-self.centerx2 + x2)*(self.centerx2 - x2)/((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2)**(3/2) + 1/np.sqrt((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2))*np.cos(self.omega*time + np.arcsin((-self.centerx2 + x2)/np.sqrt((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2)))/np.sqrt(-(-self.centerx2 + x2)**2/((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2) + 1)

    def alpha3(self, time, x1, x2, x3):
        return 0.0

    def dalphat(self, time, x1, x2, x3):
        return self.delta_alpha*self.omega*np.cos(self.omega*time + np.arcsin((-self.centerx2 + x2)/np.sqrt((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2)))

    def u1(self, time, x1, x2, x3):
        return (-0.5*self.delta_alpha*self.omega*np.sqrt(-(-self.centerx2 + x2)**2/((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2) + 1)*np.sqrt((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2)*np.cos(self.omega*time + np.arcsin((-self.centerx2 + x2)/np.sqrt((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2))) + 100*(-self.centerx1 + x1)**2*(100*(-2*self.centerx2 + 2*x2)*(self.centerx2 - x2 + 1)**2 + 100*(-self.centerx2 + x2)**2*(-2*self.centerx2 + 2*x2 - 2))*(self.centerx1 - x1 + 1)**2*np.exp(-time)*np.cos(np.pi*time))/(self.alpha0 + self.delta_alpha*np.sin(self.omega*time + np.arcsin((-self.centerx2 + x2)/np.sqrt((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2))))

    def u2(self, time, x1, x2, x3):
        return (-0.5*self.delta_alpha*self.omega*(-self.centerx2 + x2)*np.cos(self.omega*time + np.arcsin((-self.centerx2 + x2)/np.sqrt((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2))) + 100*(-self.centerx2 + x2)**2*(-100*(-2*self.centerx1 + 2*x1)*(self.centerx1 - x1 + 1)**2 - 100*(-self.centerx1 + x1)**2*(-2*self.centerx1 + 2*x1 - 2))*(self.centerx2 - x2 + 1)**2*np.exp(-time)*np.cos(np.pi*time))/(self.alpha0 + self.delta_alpha*np.sin(self.omega*time + np.arcsin((-self.centerx2 + x2)/np.sqrt((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2))))

    def du1dt(self, time, x1, x2, x3):
        return -self.delta_alpha*self.omega*(-0.5*self.delta_alpha*self.omega*np.sqrt(-(-self.centerx2 + x2)**2/((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2) + 1)*np.sqrt((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2)*np.cos(self.omega*time + np.arcsin((-self.centerx2 + x2)/np.sqrt((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2))) + 100*(-self.centerx1 + x1)**2*(100*(-2*self.centerx2 + 2*x2)*(self.centerx2 - x2 + 1)**2 + 100*(-self.centerx2 + x2)**2*(-2*self.centerx2 + 2*x2 - 2))*(self.centerx1 - x1 + 1)**2*np.exp(-time)*np.cos(np.pi*time))*np.cos(self.omega*time + np.arcsin((-self.centerx2 + x2)/np.sqrt((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2)))/(self.alpha0 + self.delta_alpha*np.sin(self.omega*time + np.arcsin((-self.centerx2 + x2)/np.sqrt((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2))))**2 + (0.5*self.delta_alpha*self.omega**2*np.sqrt(-(-self.centerx2 + x2)**2/((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2) + 1)*np.sqrt((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2)*np.sin(self.omega*time + np.arcsin((-self.centerx2 + x2)/np.sqrt((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2))) - 100*np.pi*(-self.centerx1 + x1)**2*(100*(-2*self.centerx2 + 2*x2)*(self.centerx2 - x2 + 1)**2 + 100*(-self.centerx2 + x2)**2*(-2*self.centerx2 + 2*x2 - 2))*(self.centerx1 - x1 + 1)**2*np.exp(-time)*np.sin(np.pi*time) - 100*(-self.centerx1 + x1)**2*(100*(-2*self.centerx2 + 2*x2)*(self.centerx2 - x2 + 1)**2 + 100*(-self.centerx2 + x2)**2*(-2*self.centerx2 + 2*x2 - 2))*(self.centerx1 - x1 + 1)**2*np.exp(-time)*np.cos(np.pi*time))/(self.alpha0 + self.delta_alpha*np.sin(self.omega*time + np.arcsin((-self.centerx2 + x2)/np.sqrt((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2))))

    def du2dt(self, time, x1, x2, x3):
        return -self.delta_alpha*self.omega*(-0.5*self.delta_alpha*self.omega*(-self.centerx2 + x2)*np.cos(self.omega*time + np.arcsin((-self.centerx2 + x2)/np.sqrt((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2))) + 100*(-self.centerx2 + x2)**2*(-100*(-2*self.centerx1 + 2*x1)*(self.centerx1 - x1 + 1)**2 - 100*(-self.centerx1 + x1)**2*(-2*self.centerx1 + 2*x1 - 2))*(self.centerx2 - x2 + 1)**2*np.exp(-time)*np.cos(np.pi*time))*np.cos(self.omega*time + np.arcsin((-self.centerx2 + x2)/np.sqrt((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2)))/(self.alpha0 + self.delta_alpha*np.sin(self.omega*time + np.arcsin((-self.centerx2 + x2)/np.sqrt((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2))))**2 + (0.5*self.delta_alpha*self.omega**2*(-self.centerx2 + x2)*np.sin(self.omega*time + np.arcsin((-self.centerx2 + x2)/np.sqrt((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2))) - 100*np.pi*(-self.centerx2 + x2)**2*(-100*(-2*self.centerx1 + 2*x1)*(self.centerx1 - x1 + 1)**2 - 100*(-self.centerx1 + x1)**2*(-2*self.centerx1 + 2*x1 - 2))*(self.centerx2 - x2 + 1)**2*np.exp(-time)*np.sin(np.pi*time) - 100*(-self.centerx2 + x2)**2*(-100*(-2*self.centerx1 + 2*x1)*(self.centerx1 - x1 + 1)**2 - 100*(-self.centerx1 + x1)**2*(-2*self.centerx1 + 2*x1 - 2))*(self.centerx2 - x2 + 1)**2*np.exp(-time)*np.cos(np.pi*time))/(self.alpha0 + self.delta_alpha*np.sin(self.omega*time + np.arcsin((-self.centerx2 + x2)/np.sqrt((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2))))

    def du11(self, time, x1, x2, x3):
        return -self.delta_alpha*(self.centerx1 - x1)*(-self.centerx2 + x2)*(-0.5*self.delta_alpha*self.omega*np.sqrt(-(-self.centerx2 + x2)**2/((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2) + 1)*np.sqrt((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2)*np.cos(self.omega*time + np.arcsin((-self.centerx2 + x2)/np.sqrt((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2))) + 100*(-self.centerx1 + x1)**2*(100*(-2*self.centerx2 + 2*x2)*(self.centerx2 - x2 + 1)**2 + 100*(-self.centerx2 + x2)**2*(-2*self.centerx2 + 2*x2 - 2))*(self.centerx1 - x1 + 1)**2*np.exp(-time)*np.cos(np.pi*time))*np.cos(self.omega*time + np.arcsin((-self.centerx2 + x2)/np.sqrt((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2)))/((self.alpha0 + self.delta_alpha*np.sin(self.omega*time + np.arcsin((-self.centerx2 + x2)/np.sqrt((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2))))**2*np.sqrt(-(-self.centerx2 + x2)**2/((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2) + 1)*((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2)**(3/2)) + (-0.5*self.delta_alpha*self.omega*(-self.centerx1 + x1)*np.sqrt(-(-self.centerx2 + x2)**2/((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2) + 1)*np.cos(self.omega*time + np.arcsin((-self.centerx2 + x2)/np.sqrt((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2)))/np.sqrt((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2) + 0.5*self.delta_alpha*self.omega*(self.centerx1 - x1)*(-self.centerx2 + x2)*np.sin(self.omega*time + np.arcsin((-self.centerx2 + x2)/np.sqrt((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2)))/((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2) + 0.25*self.delta_alpha*self.omega*(2*self.centerx1 - 2*x1)*(-self.centerx2 + x2)**2*np.cos(self.omega*time + np.arcsin((-self.centerx2 + x2)/np.sqrt((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2)))/(np.sqrt(-(-self.centerx2 + x2)**2/((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2) + 1)*((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2)**(3/2)) + 100*(-2*self.centerx1 + 2*x1)*(100*(-2*self.centerx2 + 2*x2)*(self.centerx2 - x2 + 1)**2 + 100*(-self.centerx2 + x2)**2*(-2*self.centerx2 + 2*x2 - 2))*(self.centerx1 - x1 + 1)**2*np.exp(-time)*np.cos(np.pi*time) + 100*(-self.centerx1 + x1)**2*(100*(-2*self.centerx2 + 2*x2)*(self.centerx2 - x2 + 1)**2 + 100*(-self.centerx2 + x2)**2*(-2*self.centerx2 + 2*x2 - 2))*(-2*self.centerx1 + 2*x1 - 2)*np.exp(-time)*np.cos(np.pi*time))/(self.alpha0 + self.delta_alpha*np.sin(self.omega*time + np.arcsin((-self.centerx2 + x2)/np.sqrt((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2))))

    def du12(self, time, x1, x2, x3):
        return -self.delta_alpha*((-self.centerx2 + x2)*(self.centerx2 - x2)/((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2)**(3/2) + 1/np.sqrt((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2))*(-0.5*self.delta_alpha*self.omega*np.sqrt(-(-self.centerx2 + x2)**2/((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2) + 1)*np.sqrt((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2)*np.cos(self.omega*time + np.arcsin((-self.centerx2 + x2)/np.sqrt((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2))) + 100*(-self.centerx1 + x1)**2*(100*(-2*self.centerx2 + 2*x2)*(self.centerx2 - x2 + 1)**2 + 100*(-self.centerx2 + x2)**2*(-2*self.centerx2 + 2*x2 - 2))*(self.centerx1 - x1 + 1)**2*np.exp(-time)*np.cos(np.pi*time))*np.cos(self.omega*time + np.arcsin((-self.centerx2 + x2)/np.sqrt((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2)))/((self.alpha0 + self.delta_alpha*np.sin(self.omega*time + np.arcsin((-self.centerx2 + x2)/np.sqrt((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2))))**2*np.sqrt(-(-self.centerx2 + x2)**2/((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2) + 1)) + (-0.5*self.delta_alpha*self.omega*(-self.centerx2 + x2)*np.sqrt(-(-self.centerx2 + x2)**2/((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2) + 1)*np.cos(self.omega*time + np.arcsin((-self.centerx2 + x2)/np.sqrt((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2)))/np.sqrt((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2) - 0.5*self.delta_alpha*self.omega*(-(-2*self.centerx2 + 2*x2)/(2*((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2)) - (-self.centerx2 + x2)**2*(2*self.centerx2 - 2*x2)/(2*((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2)**2))*np.sqrt((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2)*np.cos(self.omega*time + np.arcsin((-self.centerx2 + x2)/np.sqrt((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2)))/np.sqrt(-(-self.centerx2 + x2)**2/((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2) + 1) + 0.5*self.delta_alpha*self.omega*((-self.centerx2 + x2)*(self.centerx2 - x2)/((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2)**(3/2) + 1/np.sqrt((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2))*np.sqrt((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2)*np.sin(self.omega*time + np.arcsin((-self.centerx2 + x2)/np.sqrt((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2))) + 100*(-self.centerx1 + x1)**2*(self.centerx1 - x1 + 1)**2*(200*(-2*self.centerx2 + 2*x2)*(-2*self.centerx2 + 2*x2 - 2) + 200*(-self.centerx2 + x2)**2 + 200*(self.centerx2 - x2 + 1)**2)*np.exp(-time)*np.cos(np.pi*time))/(self.alpha0 + self.delta_alpha*np.sin(self.omega*time + np.arcsin((-self.centerx2 + x2)/np.sqrt((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2))))

    def du122(self, time, x1, x2, x3):
        return 2*self.delta_alpha**2*((-self.centerx2 + x2)*(self.centerx2 - x2)/((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2)**(3/2) + 1/np.sqrt((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2))**2*(-0.5*self.delta_alpha*self.omega*np.sqrt(-(-self.centerx2 + x2)**2/((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2) + 1)*np.sqrt((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2)*np.cos(self.omega*time + np.arcsin((-self.centerx2 + x2)/np.sqrt((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2))) + 100*(-self.centerx1 + x1)**2*(100*(-2*self.centerx2 + 2*x2)*(self.centerx2 - x2 + 1)**2 + 100*(-self.centerx2 + x2)**2*(-2*self.centerx2 + 2*x2 - 2))*(self.centerx1 - x1 + 1)**2*np.exp(-time)*np.cos(np.pi*time))*np.cos(self.omega*time + np.arcsin((-self.centerx2 + x2)/np.sqrt((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2)))**2/((self.alpha0 + self.delta_alpha*np.sin(self.omega*time + np.arcsin((-self.centerx2 + x2)/np.sqrt((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2))))**3*(-(-self.centerx2 + x2)**2/((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2) + 1)) - self.delta_alpha*((-2*self.centerx2 + 2*x2)/(2*((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2)) + (-self.centerx2 + x2)**2*(2*self.centerx2 - 2*x2)/(2*((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2)**2))*((-self.centerx2 + x2)*(self.centerx2 - x2)/((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2)**(3/2) + 1/np.sqrt((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2))*(-0.5*self.delta_alpha*self.omega*np.sqrt(-(-self.centerx2 + x2)**2/((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2) + 1)*np.sqrt((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2)*np.cos(self.omega*time + np.arcsin((-self.centerx2 + x2)/np.sqrt((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2))) + 100*(-self.centerx1 + x1)**2*(100*(-2*self.centerx2 + 2*x2)*(self.centerx2 - x2 + 1)**2 + 100*(-self.centerx2 + x2)**2*(-2*self.centerx2 + 2*x2 - 2))*(self.centerx1 - x1 + 1)**2*np.exp(-time)*np.cos(np.pi*time))*np.cos(self.omega*time + np.arcsin((-self.centerx2 + x2)/np.sqrt((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2)))/((self.alpha0 + self.delta_alpha*np.sin(self.omega*time + np.arcsin((-self.centerx2 + x2)/np.sqrt((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2))))**2*(-(-self.centerx2 + x2)**2/((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2) + 1)**(3/2)) + self.delta_alpha*((-self.centerx2 + x2)*(self.centerx2 - x2)/((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2)**(3/2) + 1/np.sqrt((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2))**2*(-0.5*self.delta_alpha*self.omega*np.sqrt(-(-self.centerx2 + x2)**2/((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2) + 1)*np.sqrt((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2)*np.cos(self.omega*time + np.arcsin((-self.centerx2 + x2)/np.sqrt((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2))) + 100*(-self.centerx1 + x1)**2*(100*(-2*self.centerx2 + 2*x2)*(self.centerx2 - x2 + 1)**2 + 100*(-self.centerx2 + x2)**2*(-2*self.centerx2 + 2*x2 - 2))*(self.centerx1 - x1 + 1)**2*np.exp(-time)*np.cos(np.pi*time))*np.sin(self.omega*time + np.arcsin((-self.centerx2 + x2)/np.sqrt((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2)))/((self.alpha0 + self.delta_alpha*np.sin(self.omega*time + np.arcsin((-self.centerx2 + x2)/np.sqrt((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2))))**2*(-(-self.centerx2 + x2)**2/((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2) + 1)) - 2*self.delta_alpha*((-self.centerx2 + x2)*(self.centerx2 - x2)/((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2)**(3/2) + 1/np.sqrt((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2))*(-0.5*self.delta_alpha*self.omega*(-self.centerx2 + x2)*np.sqrt(-(-self.centerx2 + x2)**2/((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2) + 1)*np.cos(self.omega*time + np.arcsin((-self.centerx2 + x2)/np.sqrt((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2)))/np.sqrt((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2) - 0.5*self.delta_alpha*self.omega*(-(-2*self.centerx2 + 2*x2)/(2*((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2)) - (-self.centerx2 + x2)**2*(2*self.centerx2 - 2*x2)/(2*((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2)**2))*np.sqrt((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2)*np.cos(self.omega*time + np.arcsin((-self.centerx2 + x2)/np.sqrt((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2)))/np.sqrt(-(-self.centerx2 + x2)**2/((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2) + 1) + 0.5*self.delta_alpha*self.omega*((-self.centerx2 + x2)*(self.centerx2 - x2)/((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2)**(3/2) + 1/np.sqrt((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2))*np.sqrt((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2)*np.sin(self.omega*time + np.arcsin((-self.centerx2 + x2)/np.sqrt((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2))) + 100*(-self.centerx1 + x1)**2*(self.centerx1 - x1 + 1)**2*(200*(-2*self.centerx2 + 2*x2)*(-2*self.centerx2 + 2*x2 - 2) + 200*(-self.centerx2 + x2)**2 + 200*(self.centerx2 - x2 + 1)**2)*np.exp(-time)*np.cos(np.pi*time))*np.cos(self.omega*time + np.arcsin((-self.centerx2 + x2)/np.sqrt((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2)))/((self.alpha0 + self.delta_alpha*np.sin(self.omega*time + np.arcsin((-self.centerx2 + x2)/np.sqrt((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2))))**2*np.sqrt(-(-self.centerx2 + x2)**2/((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2) + 1)) - self.delta_alpha*(-0.5*self.delta_alpha*self.omega*np.sqrt(-(-self.centerx2 + x2)**2/((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2) + 1)*np.sqrt((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2)*np.cos(self.omega*time + np.arcsin((-self.centerx2 + x2)/np.sqrt((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2))) + 100*(-self.centerx1 + x1)**2*(100*(-2*self.centerx2 + 2*x2)*(self.centerx2 - x2 + 1)**2 + 100*(-self.centerx2 + x2)**2*(-2*self.centerx2 + 2*x2 - 2))*(self.centerx1 - x1 + 1)**2*np.exp(-time)*np.cos(np.pi*time))*((-self.centerx2 + x2)*(self.centerx2 - x2)*(3*self.centerx2 - 3*x2)/((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2)**(5/2) - (-self.centerx2 + x2)/((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2)**(3/2) + 2*(self.centerx2 - x2)/((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2)**(3/2))*np.cos(self.omega*time + np.arcsin((-self.centerx2 + x2)/np.sqrt((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2)))/((self.alpha0 + self.delta_alpha*np.sin(self.omega*time + np.arcsin((-self.centerx2 + x2)/np.sqrt((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2))))**2*np.sqrt(-(-self.centerx2 + x2)**2/((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2) + 1)) + (-0.5*self.delta_alpha*self.omega*(-self.centerx2 + x2)*(self.centerx2 - x2)*np.sqrt(-(-self.centerx2 + x2)**2/((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2) + 1)*np.cos(self.omega*time + np.arcsin((-self.centerx2 + x2)/np.sqrt((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2)))/((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2)**(3/2) - 1.0*self.delta_alpha*self.omega*(-self.centerx2 + x2)*(-(-2*self.centerx2 + 2*x2)/(2*((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2)) - (-self.centerx2 + x2)**2*(2*self.centerx2 - 2*x2)/(2*((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2)**2))*np.cos(self.omega*time + np.arcsin((-self.centerx2 + x2)/np.sqrt((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2)))/(np.sqrt(-(-self.centerx2 + x2)**2/((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2) + 1)*np.sqrt((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2)) + 1.0*self.delta_alpha*self.omega*(-self.centerx2 + x2)*((-self.centerx2 + x2)*(self.centerx2 - x2)/((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2)**(3/2) + 1/np.sqrt((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2))*np.sin(self.omega*time + np.arcsin((-self.centerx2 + x2)/np.sqrt((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2)))/np.sqrt((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2) - 0.5*self.delta_alpha*self.omega*(-(-2*self.centerx2 + 2*x2)/(2*((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2)) - (-self.centerx2 + x2)**2*(2*self.centerx2 - 2*x2)/(2*((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2)**2))*((-2*self.centerx2 + 2*x2)/(2*((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2)) + (-self.centerx2 + x2)**2*(2*self.centerx2 - 2*x2)/(2*((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2)**2))*np.sqrt((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2)*np.cos(self.omega*time + np.arcsin((-self.centerx2 + x2)/np.sqrt((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2)))/(-(-self.centerx2 + x2)**2/((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2) + 1)**(3/2) + 0.5*self.delta_alpha*self.omega*(-(-2*self.centerx2 + 2*x2)/(2*((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2)) - (-self.centerx2 + x2)**2*(2*self.centerx2 - 2*x2)/(2*((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2)**2))*((-self.centerx2 + x2)*(self.centerx2 - x2)/((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2)**(3/2) + 1/np.sqrt((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2))*np.sqrt((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2)*np.sin(self.omega*time + np.arcsin((-self.centerx2 + x2)/np.sqrt((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2)))/(-(-self.centerx2 + x2)**2/((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2) + 1) - 0.5*self.delta_alpha*self.omega*np.sqrt(-(-self.centerx2 + x2)**2/((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2) + 1)*np.cos(self.omega*time + np.arcsin((-self.centerx2 + x2)/np.sqrt((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2)))/np.sqrt((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2) + 0.5*self.delta_alpha*self.omega*np.sqrt((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2)*((-self.centerx2 + x2)*(self.centerx2 - x2)*(3*self.centerx2 - 3*x2)/((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2)**(5/2) - (-self.centerx2 + x2)/((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2)**(3/2) + 2*(self.centerx2 - x2)/((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2)**(3/2))*np.sin(self.omega*time + np.arcsin((-self.centerx2 + x2)/np.sqrt((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2))) + 0.5*self.delta_alpha*self.omega*((-self.centerx2 + x2)*(self.centerx2 - x2)/((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2)**(3/2) + 1/np.sqrt((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2))**2*np.sqrt((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2)*np.cos(self.omega*time + np.arcsin((-self.centerx2 + x2)/np.sqrt((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2)))/np.sqrt(-(-self.centerx2 + x2)**2/((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2) + 1) - 0.5*self.delta_alpha*self.omega*np.sqrt((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2)*(-(-2*self.centerx2 + 2*x2)*(2*self.centerx2 - 2*x2)/((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2)**2 - (-self.centerx2 + x2)**2*(2*self.centerx2 - 2*x2)*(4*self.centerx2 - 4*x2)/(2*((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2)**3) + (-self.centerx2 + x2)**2/((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2)**2 - 1/((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2))*np.cos(self.omega*time + np.arcsin((-self.centerx2 + x2)/np.sqrt((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2)))/np.sqrt(-(-self.centerx2 + x2)**2/((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2) + 1) + 100*(-self.centerx1 + x1)**2*(self.centerx1 - x1 + 1)**2*(-2400*self.centerx2 + 2400*x2 - 1200)*np.exp(-time)*np.cos(np.pi*time))/(self.alpha0 + self.delta_alpha*np.sin(self.omega*time + np.arcsin((-self.centerx2 + x2)/np.sqrt((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2))))

    def du111(self, time, x1, x2, x3):
        return 2*self.delta_alpha**2*(self.centerx1 - x1)**2*(-self.centerx2 + x2)**2*(-0.5*self.delta_alpha*self.omega*np.sqrt(-(-self.centerx2 + x2)**2/((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2) + 1)*np.sqrt((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2)*np.cos(self.omega*time + np.arcsin((-self.centerx2 + x2)/np.sqrt((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2))) + 100*(-self.centerx1 + x1)**2*(100*(-2*self.centerx2 + 2*x2)*(self.centerx2 - x2 + 1)**2 + 100*(-self.centerx2 + x2)**2*(-2*self.centerx2 + 2*x2 - 2))*(self.centerx1 - x1 + 1)**2*np.exp(-time)*np.cos(np.pi*time))*np.cos(self.omega*time + np.arcsin((-self.centerx2 + x2)/np.sqrt((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2)))**2/((self.alpha0 + self.delta_alpha*np.sin(self.omega*time + np.arcsin((-self.centerx2 + x2)/np.sqrt((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2))))**3*(-(-self.centerx2 + x2)**2/((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2) + 1)*((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2)**3) + self.delta_alpha*(self.centerx1 - x1)**2*(-self.centerx2 + x2)**2*(-0.5*self.delta_alpha*self.omega*np.sqrt(-(-self.centerx2 + x2)**2/((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2) + 1)*np.sqrt((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2)*np.cos(self.omega*time + np.arcsin((-self.centerx2 + x2)/np.sqrt((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2))) + 100*(-self.centerx1 + x1)**2*(100*(-2*self.centerx2 + 2*x2)*(self.centerx2 - x2 + 1)**2 + 100*(-self.centerx2 + x2)**2*(-2*self.centerx2 + 2*x2 - 2))*(self.centerx1 - x1 + 1)**2*np.exp(-time)*np.cos(np.pi*time))*np.sin(self.omega*time + np.arcsin((-self.centerx2 + x2)/np.sqrt((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2)))/((self.alpha0 + self.delta_alpha*np.sin(self.omega*time + np.arcsin((-self.centerx2 + x2)/np.sqrt((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2))))**2*(-(-self.centerx2 + x2)**2/((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2) + 1)*((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2)**3) - self.delta_alpha*(self.centerx1 - x1)*(2*self.centerx1 - 2*x1)*(-self.centerx2 + x2)**3*(-0.5*self.delta_alpha*self.omega*np.sqrt(-(-self.centerx2 + x2)**2/((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2) + 1)*np.sqrt((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2)*np.cos(self.omega*time + np.arcsin((-self.centerx2 + x2)/np.sqrt((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2))) + 100*(-self.centerx1 + x1)**2*(100*(-2*self.centerx2 + 2*x2)*(self.centerx2 - x2 + 1)**2 + 100*(-self.centerx2 + x2)**2*(-2*self.centerx2 + 2*x2 - 2))*(self.centerx1 - x1 + 1)**2*np.exp(-time)*np.cos(np.pi*time))*np.cos(self.omega*time + np.arcsin((-self.centerx2 + x2)/np.sqrt((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2)))/(2*(self.alpha0 + self.delta_alpha*np.sin(self.omega*time + np.arcsin((-self.centerx2 + x2)/np.sqrt((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2))))**2*(-(-self.centerx2 + x2)**2/((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2) + 1)**(3/2)*((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2)**(7/2)) - self.delta_alpha*(self.centerx1 - x1)*(3*self.centerx1 - 3*x1)*(-self.centerx2 + x2)*(-0.5*self.delta_alpha*self.omega*np.sqrt(-(-self.centerx2 + x2)**2/((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2) + 1)*np.sqrt((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2)*np.cos(self.omega*time + np.arcsin((-self.centerx2 + x2)/np.sqrt((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2))) + 100*(-self.centerx1 + x1)**2*(100*(-2*self.centerx2 + 2*x2)*(self.centerx2 - x2 + 1)**2 + 100*(-self.centerx2 + x2)**2*(-2*self.centerx2 + 2*x2 - 2))*(self.centerx1 - x1 + 1)**2*np.exp(-time)*np.cos(np.pi*time))*np.cos(self.omega*time + np.arcsin((-self.centerx2 + x2)/np.sqrt((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2)))/((self.alpha0 + self.delta_alpha*np.sin(self.omega*time + np.arcsin((-self.centerx2 + x2)/np.sqrt((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2))))**2*np.sqrt(-(-self.centerx2 + x2)**2/((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2) + 1)*((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2)**(5/2)) - 2*self.delta_alpha*(self.centerx1 - x1)*(-self.centerx2 + x2)*(-0.5*self.delta_alpha*self.omega*(-self.centerx1 + x1)*np.sqrt(-(-self.centerx2 + x2)**2/((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2) + 1)*np.cos(self.omega*time + np.arcsin((-self.centerx2 + x2)/np.sqrt((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2)))/np.sqrt((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2) + 0.5*self.delta_alpha*self.omega*(self.centerx1 - x1)*(-self.centerx2 + x2)*np.sin(self.omega*time + np.arcsin((-self.centerx2 + x2)/np.sqrt((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2)))/((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2) + 0.25*self.delta_alpha*self.omega*(2*self.centerx1 - 2*x1)*(-self.centerx2 + x2)**2*np.cos(self.omega*time + np.arcsin((-self.centerx2 + x2)/np.sqrt((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2)))/(np.sqrt(-(-self.centerx2 + x2)**2/((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2) + 1)*((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2)**(3/2)) + 100*(-2*self.centerx1 + 2*x1)*(100*(-2*self.centerx2 + 2*x2)*(self.centerx2 - x2 + 1)**2 + 100*(-self.centerx2 + x2)**2*(-2*self.centerx2 + 2*x2 - 2))*(self.centerx1 - x1 + 1)**2*np.exp(-time)*np.cos(np.pi*time) + 100*(-self.centerx1 + x1)**2*(100*(-2*self.centerx2 + 2*x2)*(self.centerx2 - x2 + 1)**2 + 100*(-self.centerx2 + x2)**2*(-2*self.centerx2 + 2*x2 - 2))*(-2*self.centerx1 + 2*x1 - 2)*np.exp(-time)*np.cos(np.pi*time))*np.cos(self.omega*time + np.arcsin((-self.centerx2 + x2)/np.sqrt((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2)))/((self.alpha0 + self.delta_alpha*np.sin(self.omega*time + np.arcsin((-self.centerx2 + x2)/np.sqrt((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2))))**2*np.sqrt(-(-self.centerx2 + x2)**2/((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2) + 1)*((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2)**(3/2)) + self.delta_alpha*(-self.centerx2 + x2)*(-0.5*self.delta_alpha*self.omega*np.sqrt(-(-self.centerx2 + x2)**2/((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2) + 1)*np.sqrt((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2)*np.cos(self.omega*time + np.arcsin((-self.centerx2 + x2)/np.sqrt((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2))) + 100*(-self.centerx1 + x1)**2*(100*(-2*self.centerx2 + 2*x2)*(self.centerx2 - x2 + 1)**2 + 100*(-self.centerx2 + x2)**2*(-2*self.centerx2 + 2*x2 - 2))*(self.centerx1 - x1 + 1)**2*np.exp(-time)*np.cos(np.pi*time))*np.cos(self.omega*time + np.arcsin((-self.centerx2 + x2)/np.sqrt((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2)))/((self.alpha0 + self.delta_alpha*np.sin(self.omega*time + np.arcsin((-self.centerx2 + x2)/np.sqrt((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2))))**2*np.sqrt(-(-self.centerx2 + x2)**2/((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2) + 1)*((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2)**(3/2)) + (0.5*self.delta_alpha*self.omega*(-self.centerx1 + x1)*(self.centerx1 - x1)*(-self.centerx2 + x2)*np.sin(self.omega*time + np.arcsin((-self.centerx2 + x2)/np.sqrt((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2)))/((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2)**2 - 0.5*self.delta_alpha*self.omega*(-self.centerx1 + x1)*(self.centerx1 - x1)*np.sqrt(-(-self.centerx2 + x2)**2/((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2) + 1)*np.cos(self.omega*time + np.arcsin((-self.centerx2 + x2)/np.sqrt((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2)))/((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2)**(3/2) + 0.25*self.delta_alpha*self.omega*(-self.centerx1 + x1)*(2*self.centerx1 - 2*x1)*(-self.centerx2 + x2)**2*np.cos(self.omega*time + np.arcsin((-self.centerx2 + x2)/np.sqrt((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2)))/(np.sqrt(-(-self.centerx2 + x2)**2/((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2) + 1)*((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2)**(5/2)) + 0.5*self.delta_alpha*self.omega*(self.centerx1 - x1)**2*(-self.centerx2 + x2)**2*np.cos(self.omega*time + np.arcsin((-self.centerx2 + x2)/np.sqrt((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2)))/(np.sqrt(-(-self.centerx2 + x2)**2/((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2) + 1)*((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2)**(5/2)) - 0.25*self.delta_alpha*self.omega*(self.centerx1 - x1)*(2*self.centerx1 - 2*x1)*(-self.centerx2 + x2)**3*np.sin(self.omega*time + np.arcsin((-self.centerx2 + x2)/np.sqrt((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2)))/((-(-self.centerx2 + x2)**2/((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2) + 1)*((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2)**3) + 0.5*self.delta_alpha*self.omega*(self.centerx1 - x1)*(2*self.centerx1 - 2*x1)*(-self.centerx2 + x2)*np.sin(self.omega*time + np.arcsin((-self.centerx2 + x2)/np.sqrt((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2)))/((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2)**2 + 0.125*self.delta_alpha*self.omega*(2*self.centerx1 - 2*x1)**2*(-self.centerx2 + x2)**4*np.cos(self.omega*time + np.arcsin((-self.centerx2 + x2)/np.sqrt((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2)))/((-(-self.centerx2 + x2)**2/((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2) + 1)**(3/2)*((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2)**(7/2)) + 0.25*self.delta_alpha*self.omega*(2*self.centerx1 - 2*x1)*(3*self.centerx1 - 3*x1)*(-self.centerx2 + x2)**2*np.cos(self.omega*time + np.arcsin((-self.centerx2 + x2)/np.sqrt((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2)))/(np.sqrt(-(-self.centerx2 + x2)**2/((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2) + 1)*((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2)**(5/2)) - 0.5*self.delta_alpha*self.omega*(-self.centerx2 + x2)**2*np.cos(self.omega*time + np.arcsin((-self.centerx2 + x2)/np.sqrt((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2)))/(np.sqrt(-(-self.centerx2 + x2)**2/((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2) + 1)*((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2)**(3/2)) - 0.5*self.delta_alpha*self.omega*(-self.centerx2 + x2)*np.sin(self.omega*time + np.arcsin((-self.centerx2 + x2)/np.sqrt((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2)))/((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2) - 0.5*self.delta_alpha*self.omega*np.sqrt(-(-self.centerx2 + x2)**2/((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2) + 1)*np.cos(self.omega*time + np.arcsin((-self.centerx2 + x2)/np.sqrt((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2)))/np.sqrt((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2) + 200*(-2*self.centerx1 + 2*x1)*(100*(-2*self.centerx2 + 2*x2)*(self.centerx2 - x2 + 1)**2 + 100*(-self.centerx2 + x2)**2*(-2*self.centerx2 + 2*x2 - 2))*(-2*self.centerx1 + 2*x1 - 2)*np.exp(-time)*np.cos(np.pi*time) + 200*(-self.centerx1 + x1)**2*(100*(-2*self.centerx2 + 2*x2)*(self.centerx2 - x2 + 1)**2 + 100*(-self.centerx2 + x2)**2*(-2*self.centerx2 + 2*x2 - 2))*np.exp(-time)*np.cos(np.pi*time) + 200*(100*(-2*self.centerx2 + 2*x2)*(self.centerx2 - x2 + 1)**2 + 100*(-self.centerx2 + x2)**2*(-2*self.centerx2 + 2*x2 - 2))*(self.centerx1 - x1 + 1)**2*np.exp(-time)*np.cos(np.pi*time))/(self.alpha0 + self.delta_alpha*np.sin(self.omega*time + np.arcsin((-self.centerx2 + x2)/np.sqrt((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2))))

    def du22(self, time, x1, x2, x3):
        return  -self.delta_alpha*((-self.centerx2 + x2)*(self.centerx2 - x2)/((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2)**(3/2) + 1/np.sqrt((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2))*(-0.5*self.delta_alpha*self.omega*(-self.centerx2 + x2)*np.cos(self.omega*time + np.arcsin((-self.centerx2 + x2)/np.sqrt((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2))) + 100*(-self.centerx2 + x2)**2*(-100*(-2*self.centerx1 + 2*x1)*(self.centerx1 - x1 + 1)**2 - 100*(-self.centerx1 + x1)**2*(-2*self.centerx1 + 2*x1 - 2))*(self.centerx2 - x2 + 1)**2*np.exp(-time)*np.cos(np.pi*time))*np.cos(self.omega*time + np.arcsin((-self.centerx2 + x2)/np.sqrt((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2)))/((self.alpha0 + self.delta_alpha*np.sin(self.omega*time + np.arcsin((-self.centerx2 + x2)/np.sqrt((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2))))**2*np.sqrt(-(-self.centerx2 + x2)**2/((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2) + 1)) + (0.5*self.delta_alpha*self.omega*(-self.centerx2 + x2)*((-self.centerx2 + x2)*(self.centerx2 - x2)/((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2)**(3/2) + 1/np.sqrt((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2))*np.sin(self.omega*time + np.arcsin((-self.centerx2 + x2)/np.sqrt((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2)))/np.sqrt(-(-self.centerx2 + x2)**2/((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2) + 1) - 0.5*self.delta_alpha*self.omega*np.cos(self.omega*time + np.arcsin((-self.centerx2 + x2)/np.sqrt((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2))) + 100*(-2*self.centerx2 + 2*x2)*(-100*(-2*self.centerx1 + 2*x1)*(self.centerx1 - x1 + 1)**2 - 100*(-self.centerx1 + x1)**2*(-2*self.centerx1 + 2*x1 - 2))*(self.centerx2 - x2 + 1)**2*np.exp(-time)*np.cos(np.pi*time) + 100*(-self.centerx2 + x2)**2*(-100*(-2*self.centerx1 + 2*x1)*(self.centerx1 - x1 + 1)**2 - 100*(-self.centerx1 + x1)**2*(-2*self.centerx1 + 2*x1 - 2))*(-2*self.centerx2 + 2*x2 - 2)*np.exp(-time)*np.cos(np.pi*time))/(self.alpha0 + self.delta_alpha*np.sin(self.omega*time + np.arcsin((-self.centerx2 + x2)/np.sqrt((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2))))

    def du222(self, time, x1, x2, x3):
        return 2*self.delta_alpha**2*((-self.centerx2 + x2)*(self.centerx2 - x2)/((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2)**(3/2) + 1/np.sqrt((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2))**2*(-0.5*self.delta_alpha*self.omega*(-self.centerx2 + x2)*np.cos(self.omega*time + np.arcsin((-self.centerx2 + x2)/np.sqrt((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2))) + 100*(-self.centerx2 + x2)**2*(-100*(-2*self.centerx1 + 2*x1)*(self.centerx1 - x1 + 1)**2 - 100*(-self.centerx1 + x1)**2*(-2*self.centerx1 + 2*x1 - 2))*(self.centerx2 - x2 + 1)**2*np.exp(-time)*np.cos(np.pi*time))*np.cos(self.omega*time + np.arcsin((-self.centerx2 + x2)/np.sqrt((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2)))**2/((self.alpha0 + self.delta_alpha*np.sin(self.omega*time + np.arcsin((-self.centerx2 + x2)/np.sqrt((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2))))**3*(-(-self.centerx2 + x2)**2/((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2) + 1)) - self.delta_alpha*((-2*self.centerx2 + 2*x2)/(2*((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2)) + (-self.centerx2 + x2)**2*(2*self.centerx2 - 2*x2)/(2*((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2)**2))*((-self.centerx2 + x2)*(self.centerx2 - x2)/((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2)**(3/2) + 1/np.sqrt((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2))*(-0.5*self.delta_alpha*self.omega*(-self.centerx2 + x2)*np.cos(self.omega*time + np.arcsin((-self.centerx2 + x2)/np.sqrt((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2))) + 100*(-self.centerx2 + x2)**2*(-100*(-2*self.centerx1 + 2*x1)*(self.centerx1 - x1 + 1)**2 - 100*(-self.centerx1 + x1)**2*(-2*self.centerx1 + 2*x1 - 2))*(self.centerx2 - x2 + 1)**2*np.exp(-time)*np.cos(np.pi*time))*np.cos(self.omega*time + np.arcsin((-self.centerx2 + x2)/np.sqrt((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2)))/((self.alpha0 + self.delta_alpha*np.sin(self.omega*time + np.arcsin((-self.centerx2 + x2)/np.sqrt((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2))))**2*(-(-self.centerx2 + x2)**2/((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2) + 1)**(3/2)) + self.delta_alpha*((-self.centerx2 + x2)*(self.centerx2 - x2)/((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2)**(3/2) + 1/np.sqrt((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2))**2*(-0.5*self.delta_alpha*self.omega*(-self.centerx2 + x2)*np.cos(self.omega*time + np.arcsin((-self.centerx2 + x2)/np.sqrt((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2))) + 100*(-self.centerx2 + x2)**2*(-100*(-2*self.centerx1 + 2*x1)*(self.centerx1 - x1 + 1)**2 - 100*(-self.centerx1 + x1)**2*(-2*self.centerx1 + 2*x1 - 2))*(self.centerx2 - x2 + 1)**2*np.exp(-time)*np.cos(np.pi*time))*np.sin(self.omega*time + np.arcsin((-self.centerx2 + x2)/np.sqrt((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2)))/((self.alpha0 + self.delta_alpha*np.sin(self.omega*time + np.arcsin((-self.centerx2 + x2)/np.sqrt((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2))))**2*(-(-self.centerx2 + x2)**2/((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2) + 1)) - 2*self.delta_alpha*((-self.centerx2 + x2)*(self.centerx2 - x2)/((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2)**(3/2) + 1/np.sqrt((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2))*(0.5*self.delta_alpha*self.omega*(-self.centerx2 + x2)*((-self.centerx2 + x2)*(self.centerx2 - x2)/((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2)**(3/2) + 1/np.sqrt((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2))*np.sin(self.omega*time + np.arcsin((-self.centerx2 + x2)/np.sqrt((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2)))/np.sqrt(-(-self.centerx2 + x2)**2/((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2) + 1) - 0.5*self.delta_alpha*self.omega*np.cos(self.omega*time + np.arcsin((-self.centerx2 + x2)/np.sqrt((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2))) + 100*(-2*self.centerx2 + 2*x2)*(-100*(-2*self.centerx1 + 2*x1)*(self.centerx1 - x1 + 1)**2 - 100*(-self.centerx1 + x1)**2*(-2*self.centerx1 + 2*x1 - 2))*(self.centerx2 - x2 + 1)**2*np.exp(-time)*np.cos(np.pi*time) + 100*(-self.centerx2 + x2)**2*(-100*(-2*self.centerx1 + 2*x1)*(self.centerx1 - x1 + 1)**2 - 100*(-self.centerx1 + x1)**2*(-2*self.centerx1 + 2*x1 - 2))*(-2*self.centerx2 + 2*x2 - 2)*np.exp(-time)*np.cos(np.pi*time))*np.cos(self.omega*time + np.arcsin((-self.centerx2 + x2)/np.sqrt((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2)))/((self.alpha0 + self.delta_alpha*np.sin(self.omega*time + np.arcsin((-self.centerx2 + x2)/np.sqrt((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2))))**2*np.sqrt(-(-self.centerx2 + x2)**2/((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2) + 1)) - self.delta_alpha*(-0.5*self.delta_alpha*self.omega*(-self.centerx2 + x2)*np.cos(self.omega*time + np.arcsin((-self.centerx2 + x2)/np.sqrt((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2))) + 100*(-self.centerx2 + x2)**2*(-100*(-2*self.centerx1 + 2*x1)*(self.centerx1 - x1 + 1)**2 - 100*(-self.centerx1 + x1)**2*(-2*self.centerx1 + 2*x1 - 2))*(self.centerx2 - x2 + 1)**2*np.exp(-time)*np.cos(np.pi*time))*((-self.centerx2 + x2)*(self.centerx2 - x2)*(3*self.centerx2 - 3*x2)/((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2)**(5/2) - (-self.centerx2 + x2)/((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2)**(3/2) + 2*(self.centerx2 - x2)/((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2)**(3/2))*np.cos(self.omega*time + np.arcsin((-self.centerx2 + x2)/np.sqrt((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2)))/((self.alpha0 + self.delta_alpha*np.sin(self.omega*time + np.arcsin((-self.centerx2 + x2)/np.sqrt((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2))))**2*np.sqrt(-(-self.centerx2 + x2)**2/((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2) + 1)) + (0.5*self.delta_alpha*self.omega*(-self.centerx2 + x2)*((-2*self.centerx2 + 2*x2)/(2*((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2)) + (-self.centerx2 + x2)**2*(2*self.centerx2 - 2*x2)/(2*((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2)**2))*((-self.centerx2 + x2)*(self.centerx2 - x2)/((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2)**(3/2) + 1/np.sqrt((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2))*np.sin(self.omega*time + np.arcsin((-self.centerx2 + x2)/np.sqrt((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2)))/(-(-self.centerx2 + x2)**2/((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2) + 1)**(3/2) + 0.5*self.delta_alpha*self.omega*(-self.centerx2 + x2)*((-self.centerx2 + x2)*(self.centerx2 - x2)/((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2)**(3/2) + 1/np.sqrt((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2))**2*np.cos(self.omega*time + np.arcsin((-self.centerx2 + x2)/np.sqrt((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2)))/(-(-self.centerx2 + x2)**2/((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2) + 1) + 0.5*self.delta_alpha*self.omega*(-self.centerx2 + x2)*((-self.centerx2 + x2)*(self.centerx2 - x2)*(3*self.centerx2 - 3*x2)/((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2)**(5/2) - (-self.centerx2 + x2)/((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2)**(3/2) + 2*(self.centerx2 - x2)/((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2)**(3/2))*np.sin(self.omega*time + np.arcsin((-self.centerx2 + x2)/np.sqrt((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2)))/np.sqrt(-(-self.centerx2 + x2)**2/((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2) + 1) + 1.0*self.delta_alpha*self.omega*((-self.centerx2 + x2)*(self.centerx2 - x2)/((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2)**(3/2) + 1/np.sqrt((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2))*np.sin(self.omega*time + np.arcsin((-self.centerx2 + x2)/np.sqrt((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2)))/np.sqrt(-(-self.centerx2 + x2)**2/((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2) + 1) + 200*(-2*self.centerx2 + 2*x2)*(-100*(-2*self.centerx1 + 2*x1)*(self.centerx1 - x1 + 1)**2 - 100*(-self.centerx1 + x1)**2*(-2*self.centerx1 + 2*x1 - 2))*(-2*self.centerx2 + 2*x2 - 2)*np.exp(-time)*np.cos(np.pi*time) + 200*(-self.centerx2 + x2)**2*(-100*(-2*self.centerx1 + 2*x1)*(self.centerx1 - x1 + 1)**2 - 100*(-self.centerx1 + x1)**2*(-2*self.centerx1 + 2*x1 - 2))*np.exp(-time)*np.cos(np.pi*time) + 200*(-100*(-2*self.centerx1 + 2*x1)*(self.centerx1 - x1 + 1)**2 - 100*(-self.centerx1 + x1)**2*(-2*self.centerx1 + 2*x1 - 2))*(self.centerx2 - x2 + 1)**2*np.exp(-time)*np.cos(np.pi*time))/(self.alpha0 + self.delta_alpha*np.sin(self.omega*time + np.arcsin((-self.centerx2 + x2)/np.sqrt((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2))))

    def du21(self, time, x1, x2, x3):
        return -self.delta_alpha*(self.centerx1 - x1)*(-self.centerx2 + x2)*(-0.5*self.delta_alpha*self.omega*(-self.centerx2 + x2)*np.cos(self.omega*time + np.arcsin((-self.centerx2 + x2)/np.sqrt((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2))) + 100*(-self.centerx2 + x2)**2*(-100*(-2*self.centerx1 + 2*x1)*(self.centerx1 - x1 + 1)**2 - 100*(-self.centerx1 + x1)**2*(-2*self.centerx1 + 2*x1 - 2))*(self.centerx2 - x2 + 1)**2*np.exp(-time)*np.cos(np.pi*time))*np.cos(self.omega*time + np.arcsin((-self.centerx2 + x2)/np.sqrt((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2)))/((self.alpha0 + self.delta_alpha*np.sin(self.omega*time + np.arcsin((-self.centerx2 + x2)/np.sqrt((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2))))**2*np.sqrt(-(-self.centerx2 + x2)**2/((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2) + 1)*((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2)**(3/2)) + (0.5*self.delta_alpha*self.omega*(self.centerx1 - x1)*(-self.centerx2 + x2)**2*np.sin(self.omega*time + np.arcsin((-self.centerx2 + x2)/np.sqrt((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2)))/(np.sqrt(-(-self.centerx2 + x2)**2/((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2) + 1)*((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2)**(3/2)) + 100*(-self.centerx2 + x2)**2*(self.centerx2 - x2 + 1)**2*(-200*(-2*self.centerx1 + 2*x1)*(-2*self.centerx1 + 2*x1 - 2) - 200*(-self.centerx1 + x1)**2 - 200*(self.centerx1 - x1 + 1)**2)*np.exp(-time)*np.cos(np.pi*time))/(self.alpha0 + self.delta_alpha*np.sin(self.omega*time + np.arcsin((-self.centerx2 + x2)/np.sqrt((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2))))

    def du211(self, time, x1, x2, x3):
        return  2*self.delta_alpha**2*(self.centerx1 - x1)**2*(-self.centerx2 + x2)**2*(-0.5*self.delta_alpha*self.omega*(-self.centerx2 + x2)*np.cos(self.omega*time + np.arcsin((-self.centerx2 + x2)/np.sqrt((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2))) + 100*(-self.centerx2 + x2)**2*(-100*(-2*self.centerx1 + 2*x1)*(self.centerx1 - x1 + 1)**2 - 100*(-self.centerx1 + x1)**2*(-2*self.centerx1 + 2*x1 - 2))*(self.centerx2 - x2 + 1)**2*np.exp(-time)*np.cos(np.pi*time))*np.cos(self.omega*time + np.arcsin((-self.centerx2 + x2)/np.sqrt((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2)))**2/((self.alpha0 + self.delta_alpha*np.sin(self.omega*time + np.arcsin((-self.centerx2 + x2)/np.sqrt((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2))))**3*(-(-self.centerx2 + x2)**2/((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2) + 1)*((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2)**3) + self.delta_alpha*(self.centerx1 - x1)**2*(-self.centerx2 + x2)**2*(-0.5*self.delta_alpha*self.omega*(-self.centerx2 + x2)*np.cos(self.omega*time + np.arcsin((-self.centerx2 + x2)/np.sqrt((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2))) + 100*(-self.centerx2 + x2)**2*(-100*(-2*self.centerx1 + 2*x1)*(self.centerx1 - x1 + 1)**2 - 100*(-self.centerx1 + x1)**2*(-2*self.centerx1 + 2*x1 - 2))*(self.centerx2 - x2 + 1)**2*np.exp(-time)*np.cos(np.pi*time))*np.sin(self.omega*time + np.arcsin((-self.centerx2 + x2)/np.sqrt((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2)))/((self.alpha0 + self.delta_alpha*np.sin(self.omega*time + np.arcsin((-self.centerx2 + x2)/np.sqrt((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2))))**2*(-(-self.centerx2 + x2)**2/((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2) + 1)*((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2)**3) - self.delta_alpha*(self.centerx1 - x1)*(2*self.centerx1 - 2*x1)*(-self.centerx2 + x2)**3*(-0.5*self.delta_alpha*self.omega*(-self.centerx2 + x2)*np.cos(self.omega*time + np.arcsin((-self.centerx2 + x2)/np.sqrt((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2))) + 100*(-self.centerx2 + x2)**2*(-100*(-2*self.centerx1 + 2*x1)*(self.centerx1 - x1 + 1)**2 - 100*(-self.centerx1 + x1)**2*(-2*self.centerx1 + 2*x1 - 2))*(self.centerx2 - x2 + 1)**2*np.exp(-time)*np.cos(np.pi*time))*np.cos(self.omega*time + np.arcsin((-self.centerx2 + x2)/np.sqrt((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2)))/(2*(self.alpha0 + self.delta_alpha*np.sin(self.omega*time + np.arcsin((-self.centerx2 + x2)/np.sqrt((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2))))**2*(-(-self.centerx2 + x2)**2/((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2) + 1)**(3/2)*((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2)**(7/2)) - self.delta_alpha*(self.centerx1 - x1)*(3*self.centerx1 - 3*x1)*(-self.centerx2 + x2)*(-0.5*self.delta_alpha*self.omega*(-self.centerx2 + x2)*np.cos(self.omega*time + np.arcsin((-self.centerx2 + x2)/np.sqrt((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2))) + 100*(-self.centerx2 + x2)**2*(-100*(-2*self.centerx1 + 2*x1)*(self.centerx1 - x1 + 1)**2 - 100*(-self.centerx1 + x1)**2*(-2*self.centerx1 + 2*x1 - 2))*(self.centerx2 - x2 + 1)**2*np.exp(-time)*np.cos(np.pi*time))*np.cos(self.omega*time + np.arcsin((-self.centerx2 + x2)/np.sqrt((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2)))/((self.alpha0 + self.delta_alpha*np.sin(self.omega*time + np.arcsin((-self.centerx2 + x2)/np.sqrt((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2))))**2*np.sqrt(-(-self.centerx2 + x2)**2/((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2) + 1)*((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2)**(5/2)) - 2*self.delta_alpha*(self.centerx1 - x1)*(-self.centerx2 + x2)*(0.5*self.delta_alpha*self.omega*(self.centerx1 - x1)*(-self.centerx2 + x2)**2*np.sin(self.omega*time + np.arcsin((-self.centerx2 + x2)/np.sqrt((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2)))/(np.sqrt(-(-self.centerx2 + x2)**2/((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2) + 1)*((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2)**(3/2)) + 100*(-self.centerx2 + x2)**2*(self.centerx2 - x2 + 1)**2*(-200*(-2*self.centerx1 + 2*x1)*(-2*self.centerx1 + 2*x1 - 2) - 200*(-self.centerx1 + x1)**2 - 200*(self.centerx1 - x1 + 1)**2)*np.exp(-time)*np.cos(np.pi*time))*np.cos(self.omega*time + np.arcsin((-self.centerx2 + x2)/np.sqrt((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2)))/((self.alpha0 + self.delta_alpha*np.sin(self.omega*time + np.arcsin((-self.centerx2 + x2)/np.sqrt((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2))))**2*np.sqrt(-(-self.centerx2 + x2)**2/((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2) + 1)*((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2)**(3/2)) + self.delta_alpha*(-self.centerx2 + x2)*(-0.5*self.delta_alpha*self.omega*(-self.centerx2 + x2)*np.cos(self.omega*time + np.arcsin((-self.centerx2 + x2)/np.sqrt((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2))) + 100*(-self.centerx2 + x2)**2*(-100*(-2*self.centerx1 + 2*x1)*(self.centerx1 - x1 + 1)**2 - 100*(-self.centerx1 + x1)**2*(-2*self.centerx1 + 2*x1 - 2))*(self.centerx2 - x2 + 1)**2*np.exp(-time)*np.cos(np.pi*time))*np.cos(self.omega*time + np.arcsin((-self.centerx2 + x2)/np.sqrt((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2)))/((self.alpha0 + self.delta_alpha*np.sin(self.omega*time + np.arcsin((-self.centerx2 + x2)/np.sqrt((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2))))**2*np.sqrt(-(-self.centerx2 + x2)**2/((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2) + 1)*((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2)**(3/2)) + (0.5*self.delta_alpha*self.omega*(self.centerx1 - x1)**2*(-self.centerx2 + x2)**3*np.cos(self.omega*time + np.arcsin((-self.centerx2 + x2)/np.sqrt((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2)))/((-(-self.centerx2 + x2)**2/((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2) + 1)*((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2)**3) + 0.25*self.delta_alpha*self.omega*(self.centerx1 - x1)*(2*self.centerx1 - 2*x1)*(-self.centerx2 + x2)**4*np.sin(self.omega*time + np.arcsin((-self.centerx2 + x2)/np.sqrt((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2)))/((-(-self.centerx2 + x2)**2/((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2) + 1)**(3/2)*((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2)**(7/2)) + 0.5*self.delta_alpha*self.omega*(self.centerx1 - x1)*(3*self.centerx1 - 3*x1)*(-self.centerx2 + x2)**2*np.sin(self.omega*time + np.arcsin((-self.centerx2 + x2)/np.sqrt((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2)))/(np.sqrt(-(-self.centerx2 + x2)**2/((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2) + 1)*((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2)**(5/2)) - 0.5*self.delta_alpha*self.omega*(-self.centerx2 + x2)**2*np.sin(self.omega*time + np.arcsin((-self.centerx2 + x2)/np.sqrt((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2)))/(np.sqrt(-(-self.centerx2 + x2)**2/((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2) + 1)*((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2)**(3/2)) + 100*(-self.centerx2 + x2)**2*(2400*self.centerx1 - 2400*x1 + 1200)*(self.centerx2 - x2 + 1)**2*np.exp(-time)*np.cos(np.pi*time))/(self.alpha0 + self.delta_alpha*np.sin(self.omega*time + np.arcsin((-self.centerx2 + x2)/np.sqrt((-self.centerx1 + x1)**2 + (-self.centerx2 + x2)**2))))